{"name": "test_shengzhi_public", "status": "failed", "statusDetails": {"message": "AssertionError: 实际结果与预期结果不符合\nassert '1' == '40008'\n  - 40008\n  + 1", "trace": "self = <test_case.test_hcj.Test_ShengZhiTestCase_002 object at 0x0000023A36253CA0>\ninit2 = [('title', '个人信息'), ('interface', '加密接口'), ('method', 'post'), ('url', 'https://open.ybj.fujian.gov.cn/api/gafe/rest?z... '#access_token#', 'appid': '82e82b4703aaafff', 'data': {'ybid': '3'}, 'encrypt_type': 'PKCS7', ...}), ('excepted', 1)]\ninit1 = <common.class_requests.HttpSession object at 0x0000023A37022070>\n\n    def test_shengzhi_public(self,init2,init1):\n        #print(case)\n        # 第一步：准备用例数据\n        # url = myconf.get('url', 'url') + case.url  # 读取配置文件和Excel中的url地址进行拼接\n        # url = myconf.get('url', 'url')\n        url = init2[3][1]\n        # 替换用例参数\n        json = data_replace(str(init2[4][1]))\n    \n    \n        # if case.interface == '加密接口':\n        json = Encryption_Interface().encryption_interface(json)\n        # sign = BaseFuntest.get_md5sheng(eval(case.json))\n        # log.info('签名是:{}'.format(sign))\n        # case.json = str(case.json).replace('\\'', '\\\"')\n        # j = json.loads(case.json)\n        # j['sign'] = sign\n        # log.info('转换为json的数据{}'.format(j))\n        # data = eval(case.json)['data']\n        # datastr = str(data).replace('\\'', '\\\"')\n        # dataspace = str(datastr).replace(' ', '')\n        # log.info('data是：{}'.format(dataspace))\n        # pc = aes.PrpCrypt('C9C9F54F74BD35DE5242885762E99E8E')  # 初始化密钥\n        # e = pc.encrypt(dataspace)  # 加密\n        # print(\"加密:\", e)\n        # j['data']=e\n        # print('j是{}'.format(j))\n        # k = str(j).replace('data','encrypt_data')\n        # l = str(k).replace('\\'', '\\\"')\n        # case.json = l\n    \n    \n        # if case.interface == '获取token':\n        #     sign = BaseFuntest.get_md5sheng(eval(case.json))\n        #     log.info('签名是:{}'.format(sign))\n        #     case.json = str(case.json).replace('\\'', '\\\"')\n        #     j = json.loads(case.json)\n        #     j['sign'] = sign\n        #     log.info('转换为json的数据{}'.format(j))\n        #     data = eval(case.json)['data']\n        #     datastr = str(data).replace('\\'', '\\\"')\n        #     dataspace = str(datastr).replace(' ', '')\n        #     log.info('data是：{}'.format(dataspace))\n        #     pc = aes.PrpCrypt('C9C9F54F74BD35DE5242885762E99E8E')  # 初始化密钥\n        #     e = pc.encrypt(dataspace)  # 加密\n        #     print(\"加密:\", e)\n        #     j['data']=e\n        #     print('j是{}'.format(j))\n        #     k = str(j).replace('data','encrypt_data')\n        #     l = str(k).replace('\\'', '\\\"')\n        #     case.json = l\n        #     log.info('请求的参数是：{}'.format(case.json))\n        #     # 第二步 发送请求，获取结果\n        #     log.info('正在请求地址{}'.format(url))\n        #     response = self.http.request(method=case.method, url=url, json=eval(case.json))\n        #     res = response.json()\n        #     log.info('返回的结果是:{}'.format(res))\n        #     datas_encrypt = res['encrypt_data']\n        #     log.info(\"datas_encrypt是：{}\".format(datas_encrypt))\n        #     d = pc.decrypt(datas_encrypt)  # 解密\n        #     bianma_d = d.encode().split(b'\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08')\n        #     bianma_d_str = str(bianma_d)\n        #     bianma_d_str_de = bianma_d_str.replace(\"[b'\",\"\")\n        #     bianma_d_str_de_de = bianma_d_str_de.replace(\"', b'']\",\"\")\n        #     bianma_d_str_de_de_de = eval(bianma_d_str_de_de)\n        #     access_token = bianma_d_str_de_de_de['access_token']\n        #     log.info(\"access_token:{}\".format(access_token))\n        #     # 将提取接口返回数据，保存为临时变量\n        #     setattr(ConText, 'access_token', access_token)\n    \n        # json = eval(case.json)\n        log.info('请求的参数是：{}'.format(str(json)))\n        # 第二步 发送请求，获取结果\n        log.info('正在请求地址{}'.format(url))\n        response = init1.request(method=init2[2][1], url=url, json=eval(json))\n        res = response.json()\n        log.info('返回的结果是:{}'.format(res))\n        res_code = res['flag']  # 根据接口文档获取出来的是str格式\n    \n    \n        # 第三步 比对预期结果和实际结果\n        try:\n            # self.assertEqual(str(case.excepted), res_code)\n            assert str(init2[5][1]) == res_code,\"实际结果与预期结果不符合\"\n    \n        except AssertionError as e:\n            # 用例执行未通过\n            # self.assertNotEqual(str(case.excepted), res_code)\n            # self.excel.write_data(row=case.case_id + 1, column=8, value='未通过')\n            log.info('{}:用例执行未通过'.format(init2[0][1]))\n            log.info('请求的地址：{}'.format(url))\n            log.info('请求的参数是：{}'.format(json))\n            log.info('返回的结果是:{}'.format(res))  # 执行不通过返回对应结果到日志\n            log.exception(e)\n>           raise e\n\ntest_case\\test_hcj.py:261: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_case.test_hcj.Test_ShengZhiTestCase_002 object at 0x0000023A36253CA0>\ninit2 = [('title', '个人信息'), ('interface', '加密接口'), ('method', 'post'), ('url', 'https://open.ybj.fujian.gov.cn/api/gafe/rest?z... '#access_token#', 'appid': '82e82b4703aaafff', 'data': {'ybid': '3'}, 'encrypt_type': 'PKCS7', ...}), ('excepted', 1)]\ninit1 = <common.class_requests.HttpSession object at 0x0000023A37022070>\n\n    def test_shengzhi_public(self,init2,init1):\n        #print(case)\n        # 第一步：准备用例数据\n        # url = myconf.get('url', 'url') + case.url  # 读取配置文件和Excel中的url地址进行拼接\n        # url = myconf.get('url', 'url')\n        url = init2[3][1]\n        # 替换用例参数\n        json = data_replace(str(init2[4][1]))\n    \n    \n        # if case.interface == '加密接口':\n        json = Encryption_Interface().encryption_interface(json)\n        # sign = BaseFuntest.get_md5sheng(eval(case.json))\n        # log.info('签名是:{}'.format(sign))\n        # case.json = str(case.json).replace('\\'', '\\\"')\n        # j = json.loads(case.json)\n        # j['sign'] = sign\n        # log.info('转换为json的数据{}'.format(j))\n        # data = eval(case.json)['data']\n        # datastr = str(data).replace('\\'', '\\\"')\n        # dataspace = str(datastr).replace(' ', '')\n        # log.info('data是：{}'.format(dataspace))\n        # pc = aes.PrpCrypt('C9C9F54F74BD35DE5242885762E99E8E')  # 初始化密钥\n        # e = pc.encrypt(dataspace)  # 加密\n        # print(\"加密:\", e)\n        # j['data']=e\n        # print('j是{}'.format(j))\n        # k = str(j).replace('data','encrypt_data')\n        # l = str(k).replace('\\'', '\\\"')\n        # case.json = l\n    \n    \n        # if case.interface == '获取token':\n        #     sign = BaseFuntest.get_md5sheng(eval(case.json))\n        #     log.info('签名是:{}'.format(sign))\n        #     case.json = str(case.json).replace('\\'', '\\\"')\n        #     j = json.loads(case.json)\n        #     j['sign'] = sign\n        #     log.info('转换为json的数据{}'.format(j))\n        #     data = eval(case.json)['data']\n        #     datastr = str(data).replace('\\'', '\\\"')\n        #     dataspace = str(datastr).replace(' ', '')\n        #     log.info('data是：{}'.format(dataspace))\n        #     pc = aes.PrpCrypt('C9C9F54F74BD35DE5242885762E99E8E')  # 初始化密钥\n        #     e = pc.encrypt(dataspace)  # 加密\n        #     print(\"加密:\", e)\n        #     j['data']=e\n        #     print('j是{}'.format(j))\n        #     k = str(j).replace('data','encrypt_data')\n        #     l = str(k).replace('\\'', '\\\"')\n        #     case.json = l\n        #     log.info('请求的参数是：{}'.format(case.json))\n        #     # 第二步 发送请求，获取结果\n        #     log.info('正在请求地址{}'.format(url))\n        #     response = self.http.request(method=case.method, url=url, json=eval(case.json))\n        #     res = response.json()\n        #     log.info('返回的结果是:{}'.format(res))\n        #     datas_encrypt = res['encrypt_data']\n        #     log.info(\"datas_encrypt是：{}\".format(datas_encrypt))\n        #     d = pc.decrypt(datas_encrypt)  # 解密\n        #     bianma_d = d.encode().split(b'\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08')\n        #     bianma_d_str = str(bianma_d)\n        #     bianma_d_str_de = bianma_d_str.replace(\"[b'\",\"\")\n        #     bianma_d_str_de_de = bianma_d_str_de.replace(\"', b'']\",\"\")\n        #     bianma_d_str_de_de_de = eval(bianma_d_str_de_de)\n        #     access_token = bianma_d_str_de_de_de['access_token']\n        #     log.info(\"access_token:{}\".format(access_token))\n        #     # 将提取接口返回数据，保存为临时变量\n        #     setattr(ConText, 'access_token', access_token)\n    \n        # json = eval(case.json)\n        log.info('请求的参数是：{}'.format(str(json)))\n        # 第二步 发送请求，获取结果\n        log.info('正在请求地址{}'.format(url))\n        response = init1.request(method=init2[2][1], url=url, json=eval(json))\n        res = response.json()\n        log.info('返回的结果是:{}'.format(res))\n        res_code = res['flag']  # 根据接口文档获取出来的是str格式\n    \n    \n        # 第三步 比对预期结果和实际结果\n        try:\n            # self.assertEqual(str(case.excepted), res_code)\n>           assert str(init2[5][1]) == res_code,\"实际结果与预期结果不符合\"\nE           AssertionError: 实际结果与预期结果不符合\nE           assert '1' == '40008'\nE             - 40008\nE             + 1\n\ntest_case\\test_hcj.py:250: AssertionError"}, "attachments": [{"name": "log", "source": "a52821fe-ad8b-45d7-8a6b-dd00f09cde64-attachment.txt", "type": "text/plain"}], "start": 1637202500299, "stop": 1637202500543, "uuid": "6596d4e7-168b-4adf-a4ae-fe145f32a093", "historyId": "f38a88d1ee416345c80a15b4721582aa", "testCaseId": "ab62f6a2cf039951070671f790cbdd52", "fullName": "test_case.test_hcj.Test_ShengZhiTestCase_002#test_shengzhi_public", "labels": [{"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_hcj"}, {"name": "subSuite", "value": "Test_ShengZhiTestCase_002"}, {"name": "host", "value": "DESKTOP-EKFOSJF"}, {"name": "thread", "value": "29548-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_hcj"}]}
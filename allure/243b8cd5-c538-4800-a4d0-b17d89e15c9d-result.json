{"name": "test_shengzhi_public", "status": "broken", "statusDetails": {"message": "AttributeError: 'Response' object has no attribute 'failure_count'", "trace": "self = <test_case.test_hcj.Test_ShengZhiTestCase_001 object at 0x0000022369E64100>\ninit = [('title', '提取接口返回数据'), ('interface', '获取token'), ('method', 'post'), ('url', 'https://open.ybj.fujian.gov.cn/api/gafe...ype': '0', 'appid': '82e82b4703aaafff'}, 'encrypt_type': 'PKCS7', 'funid': 'N03.00.05.11', ...}), ('excepted', 1), ...]\ninit1 = <common.class_requests.HttpSession object at 0x000002236ABC21F0>\n\n    def test_shengzhi_public(self,init,init1):\n        #print(case)\n        # 第一步：准备用例数据\n        # url = myconf.get('url', 'url') + case.url  # 读取配置文件和Excel中的url地址进行拼接\n        # url = myconf.get('url', 'url')\n        #url = case.url\n        url = init[3][1]\n        # 替换用例参数\n        #case.json = data_replace(str(case.json))\n        json = data_replace(str(init[4][1]))\n    \n    \n        # if case.interface == '加密接口':\n        #     case.json = Encryption_Interface().encryption_interface(case,case.json)\n    \n            # sign = BaseFuntest.get_md5sheng(eval(case.json))\n            # log.info('签名是:{}'.format(sign))\n            # case.json = str(case.json).replace('\\'', '\\\"')\n            # j = json.loads(case.json)\n            # j['sign'] = sign\n            # log.info('转换为json的数据{}'.format(j))\n            # data = eval(case.json)['data']\n            # datastr = str(data).replace('\\'', '\\\"')\n            # dataspace = str(datastr).replace(' ', '')\n            # log.info('data是：{}'.format(dataspace))\n            # pc = aes.PrpCrypt('C9C9F54F74BD35DE5242885762E99E8E')  # 初始化密钥\n            # e = pc.encrypt(dataspace)  # 加密\n            # print(\"加密:\", e)\n            # j['data']=e\n            # print('j是{}'.format(j))\n            # k = str(j).replace('data','encrypt_data')\n            # l = str(k).replace('\\'', '\\\"')\n            # case.json = l\n    \n    \n        # if case.interface == '获取token':\n        json,pc = Access_Token().access_token(json,url)\n        # sign = BaseFuntest.get_md5sheng(eval(case.json))\n        # log.info('签名是:{}'.format(sign))\n        # case.json = str(case.json).replace('\\'', '\\\"')\n        # j = json.loads(case.json)\n        # j['sign'] = sign\n        # log.info('转换为json的数据{}'.format(j))\n        # data = eval(case.json)['data']\n        # datastr = str(data).replace('\\'', '\\\"')\n        # dataspace = str(datastr).replace(' ', '')\n        # log.info('data是：{}'.format(dataspace))\n        # pc = aes.PrpCrypt('C9C9F54F74BD35DE5242885762E99E8E')  # 初始化密钥\n        # e = pc.encrypt(dataspace)  # 加密\n        # print(\"加密:\", e)\n        # j['data']=e\n        # print('j是{}'.format(j))\n        # k = str(j).replace('data','encrypt_data')\n        # l = str(k).replace('\\'', '\\\"')\n        # case.json = l\n        # log.info('请求的参数是：{}'.format(case.json))\n        # # 第二步 发送请求，获取结果\n        # log.info('正在请求地址{}'.format(url))\n        response = init1.request(method=init[2][1], url=url, json=eval(json))\n        res = response.json()\n        log.info('返回的结果是:{}'.format(res))\n        datas_encrypt = res['encrypt_data']\n        log.info(\"datas_encrypt是：{}\".format(datas_encrypt))\n        d = pc.decrypt(datas_encrypt)  # 解密\n        bianma_d = d.encode().split(b'\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08')\n        bianma_d_str = str(bianma_d)\n        bianma_d_str_de = bianma_d_str.replace(\"[b'\",\"\")\n        bianma_d_str_de_de = bianma_d_str_de.replace(\"', b'']\",\"\")\n        bianma_d_str_de_de_de = eval(bianma_d_str_de_de)\n        access_token = bianma_d_str_de_de_de['access_token']\n        log.info(\"access_token:{}\".format(access_token))\n        # 将提取接口返回数据，保存为临时变量\n        setattr(ConText, 'access_token', access_token)\n    \n        # json = eval(case.json)\n        # log.info('请求的参数是：{}'.format(str(case.json)))\n        # # 第二步 发送请求，获取结果\n        # log.info('正在请求地址{}'.format(url))\n        # response = self.http.request(method=case.method, url=url, json=eval(case.json))\n        # res = response.json()\n        # log.info('返回的结果是:{}'.format(res))\n        res_code = res['flag']  # 根据接口文档获取出来的是str格式\n    \n    \n        # 第三步 比对预期结果和实际结果\n        try:\n            # self.assertEqual(str(init[5][1]), res_code)\n            assert str(init[5][1]) == res_code,\"实际结果与预期不符合\"\n        except AssertionError as e:\n            # 用例执行未通过\n            # self.assertNotEqual(str(case.excepted), res_code)\n            # self.excel.write_data(row=case.case_id + 1, column=8, value='未通过')\n            log.info('{}:用例执行未通过'.format(init[0][1]))\n            log.info('请求的地址：{}'.format(url))\n            log.info('请求的参数是：{}'.format(json))\n            log.info('返回的结果是:{}'.format(res))  # 执行不通过返回对应结果到日志\n            log.exception(e)\n            raise e\n        else:\n        #     self.excel.write_data(row=case.case_id + 1, column=8, value='通过')\n            log.info('{}:用例执行通过'.format(init[0][1]))\n>       analysisResult(response)\n\ntest_case\\test_hcj.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntest_result = <Response [200]>\n\n    def analysisResult(test_result):\n>       failure_count = test_result.failure_count\nE       AttributeError: 'Response' object has no attribute 'failure_count'\n\ncommon\\BaseFuntest.py:44: AttributeError"}, "attachments": [{"name": "log", "source": "555cd29b-0a5a-4451-ad10-925aaf320ca8-attachment.txt", "type": "text/plain"}], "start": 1631168163716, "stop": 1631168163924, "uuid": "75d830f7-2562-45ac-9cf1-e3882938a6a9", "historyId": "5a31a3c8c622bea69e8bb246af1b18ee", "testCaseId": "c9259e76d7efb6e85a07528f5653678e", "fullName": "test_case.test_hcj.Test_ShengZhiTestCase_001#test_shengzhi_public", "labels": [{"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_hcj"}, {"name": "subSuite", "value": "Test_ShengZhiTestCase_001"}, {"name": "host", "value": "DESKTOP-EKFOSJF"}, {"name": "thread", "value": "20016-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_hcj"}]}